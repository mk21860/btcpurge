{
  "name": "openpgp",
  "description": "OpenPGP.js is a Javascript implementation of the OpenPGP protocol. This is defined in RFC 4880.",
  "version": "1.2.0",
  "homepage": "http://openpgpjs.org/",
  "engines": {
    "node": ">=0.8"
  },
  "keywords": [
    "crypto",
    "pgp",
    "gpg",
    "openpgp"
  ],
  "main": "src/index.js",
  "directories": {
    "lib": "src"
  },
  "files": [
    "src/",
    "dist/openpgp.js",
    "dist/openpgp.worker.js",
    "dist/openpgp.min.js",
    "dist/openpgp.worker.min.js",
    "test/unittests.js",
    "test/general",
    "test/crypto"
  ],
  "scripts": {
    "pretest": "grunt",
    "test": "grunt test"
  },
  "devDependencies": {
    "browserify": "~2.35",
    "chai": "~1.8.1",
    "grunt": "~0.4.2",
    "grunt-browserify": "~1.2.11",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-connect": "~0.6.0",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-jshint": "*",
    "grunt-contrib-uglify": "~0.3.2",
    "grunt-jsbeautifier": "~0.2.6",
    "grunt-jsdoc": "*",
    "grunt-mocha-test": "~0.8.1",
    "grunt-text-replace": "~0.3.11",
    "mocha": "~1.15.1",
    "mocha-phantomjs": "~3.1.6",
    "phantomjs": "~1.9.2-5"
  },
  "dependencies": {
    "es6-promise": "^1.0.0",
    "node-localstorage": "~0.3.4",
    "zlibjs": "^0.2.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/openpgpjs/openpgpjs"
  },
  "readme": "[![Build Status](https://travis-ci.org/openpgpjs/openpgpjs.svg?branch=master)](https://travis-ci.org/openpgpjs/openpgpjs)\n[![Bountysource](https://www.bountysource.com/badge/team?team_id=10316&style=raised)](https://www.bountysource.com/teams/openpgpjs?utm_source=openpgpjs&utm_medium=shield&utm_campaign=raised)\n\nOpenPGP.js\n==========\n\n[OpenPGP.js](http://openpgpjs.org/) is a Javascript implementation of the OpenPGP protocol. This is defined in [RFC 4880](http://tools.ietf.org/html/rfc4880).\n\n### Node support\n\nFor server side use, install via npm:\n\n    npm install --save openpgp\n\n\n### Browser support\n\nFor use in browser, install via bower:\n\n    bower install --save openpgp\n\nOr Fetch a minified build under [dist](https://github.com/openpgpjs/openpgpjs/tree/master/dist).\n\nThe library can be loaded as a CommonJS module, an AMD module or accessed globally via `window.openpgp`.\n\n\n### Dependencies\n\nOpenPGP.js only supports browsers that implement `window.crypto.getRandomValues`. Also, if the browsers support [native WebCrypto](http://www.w3.org/TR/WebCryptoAPI/) via the `window.crypto.subtle` api, this will be used. Though this can be deactivated by setting `config.useWebCrypto = false`. In this case the library will fall back to Web Worker operations if the `initWorker(workerPath)` is set.\n\nOpenPGP.js uses ES6 promises which are available in [most modern browsers](http://caniuse.com/#feat=promises). If you need to support browsers that do not support Promises, fear not! There is a [polyfill](https://github.com/jakearchibald/es6-promise), which is included in the build step. So no action required on the developer's part for promises!\n\n\n### Examples\n\n#### Generate new keypair\n```js\nvar openpgp = require('openpgp');\n\nvar options = {\n    numBits: 2048,\n    userId: 'Jon Smith <jon.smith@example.org>',\n    passphrase: 'super long and hard to guess secret'\n};\n\nopenpgp.generateKeyPair(options).then(function(keypair) {\n    // success\n    var privkey = keypair.privateKeyArmored;\n    var pubkey = keypair.publicKeyArmored;\n}).catch(function(error) {\n    // failure\n});\n```\n\n#### Encryption\n```js\nvar openpgp = require('openpgp');\n\nvar key = '-----BEGIN PGP PUBLIC KEY BLOCK ... END PGP PUBLIC KEY BLOCK-----';\nvar publicKey = openpgp.key.readArmored(key);\n\nopenpgp.encryptMessage(publicKey.keys, 'Hello, World!').then(function(pgpMessage) {\n    // success\n}).catch(function(error) {\n    // failure\n});\n```\n\n#### Decryption\n```js\nvar openpgp = require('openpgp');\n\nvar key = '-----BEGIN PGP PRIVATE KEY BLOCK ... END PGP PRIVATE KEY BLOCK-----';\nvar privateKey = openpgp.key.readArmored(key).keys[0];\nprivateKey.decrypt('passphrase');\n\nvar pgpMessage = '-----BEGIN PGP MESSAGE ... END PGP MESSAGE-----';\npgpMessage = openpgp.message.readArmored(pgpMessage);\n\nopenpgp.decryptMessage(privateKey, pgpMessage).then(function(plaintext) {\n    // success\n}).catch(function(error) {\n    // failure\n});\n```\n\n### Documentation\n\nA jsdoc build of our code comments is available at [doc/index.html](http://openpgpjs.org/openpgpjs/doc/index.html). Public calls should generally be made through the OpenPGP object [doc/openpgp.html](http://openpgpjs.org/openpgpjs/doc/module-openpgp.html).\n\n### Security recommendations\n\nIt should be noted that js crypto apps deployed via regular web hosting (a.k.a. [**host-based security**](https://www.schneier.com/blog/archives/2012/08/cryptocat.html)) provide users with less security than installable apps with auditable static versions. Installable apps can be deployed as a [Firefox](https://developer.mozilla.org/en-US/Marketplace/Publishing/Packaged_apps) or [Chrome](http://developer.chrome.com/apps/about_apps.html) packaged app. These apps are basically signed zip files and their runtimes typically enforce a strict [Content Security Policy (CSP)](http://www.html5rocks.com/en/tutorials/security/content-security-policy/) to protect users against [XSS](http://en.wikipedia.org/wiki/Cross-site_scripting). This [blogpost](http://tonyarcieri.com/whats-wrong-with-webcrypto) explains the trust model of the web quite well.\n\nIt is also recommended to set a strong passphrase that protects the user's private key on disk.\n\n### Development\n\nTo create your own build of the library, just run the following command after cloning the git repo. This will download all dependencies, run the tests and create a minifed bundle under `dist/openpgp.min.js` to use in your project:\n\n    npm install && npm test\n\n### Mailing List\n\nYou can [sign up](http://list.openpgpjs.org/) for our mailing list and ask for help there.  We've recently worked on getting our [archive up and running](http://www.mail-archive.com/list@openpgpjs.org/).\n\n### How do I get involved?\n\nYou want to help, great! Go ahead and fork our repo, make your changes and send us a pull request.\n\n### License\n\nGNU Lesser General Public License (3.0 or any later version). Please take a look at the [LICENSE](LICENSE) file for more information.\n\n### Resources\n\nBelow is a collection of resources, many of these were projects that were in someway a precursor to the current OpenPGP.js project. If you'd like to add your link here, please do so in a pull request or email to the list.\n\n* [http://www.hanewin.net/encrypt/](http://www.hanewin.net/encrypt/)\n* [https://github.com/seancolyer/gmail-crypt](https://github.com/seancolyer/gmail-crypt)\n* [https://github.com/mete0r/openpgp-js](https://github.com/mete0r/openpgp-js)\n* [http://fitblip.github.com/JSPGP-Stuffs/](http://fitblip.github.com/JSPGP-Stuffs/)\n* [http://qooxdoo.org/contrib/project/crypto](http://qooxdoo.org/contrib/project/crypto)\n* [https://github.com/GPGTools/Mobile/wiki/Introduction](https://github.com/GPGTools/Mobile/wiki/Introduction)\n* [http://gpg4browsers.recurity.com/](http://gpg4browsers.recurity.com/)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/openpgpjs/openpgpjs/issues"
  },
  "_id": "openpgp@1.2.0",
  "dist": {
    "shasum": "4ce827caa7e1b229b5b0ece7a8e670c1b7b835ba"
  },
  "_from": "openpgp@",
  "_resolved": "https://registry.npmjs.org/openpgp/-/openpgp-1.2.0.tgz"
}
